apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/instance: simple-quarkus-service
    app.kubernetes.io/name: simple-quarkus-service
    pipeline.openshift.io/runtime: java
    pipeline.openshift.io/runtime-version: openjdk-11-el7
    pipeline.openshift.io/type: kubernetes
  name: build-and-release
spec:
  params:
    - default: simple-quarkus-service
      name: APP_NAME
      type: string
    - default: 'https://github.com/froberge/simple-quarkus-service'
      name: GIT_REPO
      type: string
    - default: main
      name: GIT_REVISION
      type: string
    - default: 'https://github.com/froberge/simple-quarkus-service-deploy'
      name: DEPLOY_GIT_REPO
      type: string
    - default: main
      name: DEPLOY_GIT_REVISION
      type: string
    - default: gitops-demo/simple-quarkus-service-deploy/app/overlays/dev
      name: DEV_OVERLAY_DIR
      type: string
    - default: gitops-demo/simple-quarkus-service-deploy/app/overlays/prod
      name: PROD_OVERLAY_DIR
      type: string
    - default: >-
        image-registry.openshift-image-registry.svc:5000/simple-quarkus-pipeline/simple-quarkus-service
      name: IMAGE_NAME
      type: string
    - default: openjdk-11-el7
      name: VERSION
      type: string
  workspaces:
    - name: source
    - name: m2-repo
    - name: scratch
      description: This is a scratch disk
    - name: git-credentials
      description: My git credentials
  tasks:
    - name: clone-code-repo
      taskRef:
        resolver: cluster
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone
          - name: namespace
            value: openshift-pipelines
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: deleteExisting
          value: 'true'
      workspaces:
        - name: output
          workspace: source
    - name: create-image-tag
      taskRef:
        apiVersion: tekton.dev/v1  
        kind: task    
        name: set-image-tag
      params:
        - name: commit
          value: $(tasks.clone-code-repo.results.commit)
        - name: url
          value: $(tasks.clone-code-repo.results.url)
        - name: imagestream
          value: $(params.IMAGE_NAME)
      workspaces:
        - name: tagoutput
          workspace: source
      runAfter:
        - clone-code-repo
    - name: test-app
      taskRef:
        apiVersion: tekton.dev/v1
        kind: Task
        name: maven
        namespace: openshift-pipelines
      params:
        - name: GOALS
          value:
            - 'clean'
            - 'test'
      workspaces:
        - name: maven-settings
          workspace: m2-repo
        - name: source
          workspace: source
      runAfter:
        - clone-code-repo
    - name: build-app
      taskRef:
        apiVersion: tekton.dev/v1
        kind: Task
        name: s2i-java
        namespace: openshift-pipelines
      params:
        - name: IMAGE
          value: $(tasks.create-image-tag.results.tag)
        - name: TLSVERIFY
          value: 'false'
        - name: PATH_CONTEXT
          value: $(workspaces.source.path)
        - name: VERSION
          value: $(params.VERSION)
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - test-app
        - create-image-tag
    - name: clone-deployment-repo
      taskRef:
        apiVersion: tekton.dev/v1      
        kind: task
        name: git-clone
        namespace: openshift-pipelines
      params:
      - name: url
        value: $(params.DEPLOY_GIT_REPO)
      - name: revision
        value: $(params.DEPLOY_GIT_REVISION)
      workspaces:
      - name: output
        workspace: source
      runAfter:
        - build-app
    - name: patch-deployment-dev
      taskRef:
        apiVersion: tekton.dev/v1
        kind: task
        name: kustomize
      params:
        - name: imagestream
          value: $(tasks.create-image-tag.results.tag)
        - name: overlaypath
          value: $(params.DEV_OVERLAY_DIR)
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - clone-deployment-repo
    - name: commit-patch-to-dev
      taskRef:
        apiVersion: tekton.dev/v1      
        kind: task
        name: git-cli
        namespace: openshift-pipelines
      params:
      - name: GIT_USER_NAME
        value: simple-quarkus-pipeline-bot
      - name: GIT_USER_EMAIL
        value: simple-quarkus-pipeline-bot@demo.com
      - name: GIT_SCRIPT
        value: |
          git config --global --add safe.directory /workspace/source
          git add -A .
          git commit -am "Run $(tasks.create-image-tag.results.tagref): Updating image to $(tasks.create-image-tag.results.tag) on $(params.DEV_OVERLAY_DIR)"
          git push origin HEAD:main
      workspaces:
      - name: source
        workspace: source
      - name: input
        workspace: scratch
      - name: basic-auth
        workspace: git-credentials
      runAfter:
        - patch-deployment-dev
    - name: patch-deployment-prod
      taskRef:
        apiVersion: tekton.dev/v1
        kind: task      
        name: kustomize
      params:
        - name: imagestream
          value: $(tasks.create-image-tag.results.tag)
        - name: overlaypath
          value: $(params.PROD_OVERLAY_DIR)
      workspaces:
        - name: source
          workspace: source
      runAfter:
        - commit-patch-to-dev
    - name: create-pullrequest-prod
      taskRef:
        apiVersion: tekton.dev/v1
        kind: task
        name: git-cli
        namespace: openshift-pipelines
      params:
      - name: GIT_USER_NAME
        value: simple-quarkus-pipeline-bot
      - name: GIT_USER_EMAIL
        value: simple-quarkus-pipeline-bot@demo.com
      - name: GIT_SCRIPT
        value: |
          git config --global --add safe.directory /workspace/source
          git checkout -b $(tasks.create-image-tag.results.tagref)
          git add -A .
          git commit -am "Run $(tasks.create-image-tag.results.tagref): Updating image to $(tasks.create-image-tag.results.tag) on $(params.PROD_OVERLAY_DIR)"
          git push origin HEAD:$(tasks.create-image-tag.results.tagref)
      workspaces:
      - name: source
        workspace: source
      - name: input
        workspace: scratch
      - name: basic-auth
        workspace: git-credentials
      runAfter:
        - patch-deployment-prod
